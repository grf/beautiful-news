#!/usr/bin/env ruby

require 'nokogiri'
require 'open-uri'
require 'time'
require 'open3'
require 'fileutils'

# Change DISPLAY_PROGRAM to the name of a program on your system that
# will display downloaded images from a supplied list of image
# files. The 'open' program works for MacOS.

DISPLAY_PROGRAM = 'open'
IMAGES_DIRECTORY = File.join(File.dirname(File.realdirpath(__FILE__)), 'images')
DEBUG = false
RSS_FEED = 'http://feeds.feedburner.com/beautifulnewsdaily'

# Grab the current RSS feed and yield records for each news item:  { :url, :title, :filename, :description, :date }

def get_beautiful_news()
  doc = Nokogiri::XML open(RSS_FEED)
  items = doc.xpath('//item')
  items.each do |item|
    url = item.xpath('./enclosure')[0].attributes['url'].value
    data = {
      url: url,
      filename: File.join(IMAGES_DIRECTORY, File.basename(url)),
      title: item.xpath('./title').children[0].text,
      description: item.xpath('./description').children[0].text,
      date: Time.parse(item.xpath('./pubDate').children[0].text), }
    yield data
  end
rescue => e
  STDERR.puts "fatal error parsing #{RSS_FEED}: #{e}"
  exit -1
end


def find_display_program(name)
  ENV['PATH'].split(':').each do |dir|
    program = File.join(dir, name)
    return true if File.exists?(program) and File.executable?(program)
  end
  return false
end


def get_image(url)
  return open(url).read
rescue => e
  STDERR.puts "#{url}: #{e}" if DEBUG
  return nil
end

# main()

downloads = []

get_beautiful_news() do |news_item|
  filename, url, date = news_item.fetch_values(:filename, :url, :date)
  next if File.exists? filename
  next unless image_data = get_image(url)
  open(filename, 'w') { |fh| fh.write(image_data) }
  FileUtils.touch filename, :mtime => date
  downloads.push filename
end

exit 0 if downloads.empty?

if find_display_program DISPLAY_PROGRAM
  Open3.popen2(DISPLAY_PROGRAM, *downloads[0..6])  # display a maximum of a week's worth of recent images..
else
  puts 'Downloaded:', downloads.map { |name| "  #{File.basename name}"}
end
